// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: waypoints.sql

package query

import (
	"context"
	"strings"
)

const getWaypointsByName = `-- name: GetWaypointsByName :many
SELECT symbol, system, orbits, x, y, type FROM waypoints
WHERE symbol IN (/*SLICE:waypoint_ids*/?)
`

func (q *Queries) GetWaypointsByName(ctx context.Context, waypointIds []string) ([]Waypoint, error) {
	query := getWaypointsByName
	var queryParams []interface{}
	if len(waypointIds) > 0 {
		for _, v := range waypointIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:waypoint_ids*/?", strings.Repeat(",?", len(waypointIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:waypoint_ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Waypoint{}
	for rows.Next() {
		var i Waypoint
		if err := rows.Scan(
			&i.Symbol,
			&i.System,
			&i.Orbits,
			&i.X,
			&i.Y,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWaypointsForSystem = `-- name: GetWaypointsForSystem :many
SELECT symbol, system, orbits, x, y, type FROM waypoints
WHERE system = ?1
`

func (q *Queries) GetWaypointsForSystem(ctx context.Context, systemName string) ([]Waypoint, error) {
	rows, err := q.query(ctx, q.getWaypointsForSystemStmt, getWaypointsForSystem, systemName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Waypoint{}
	for rows.Next() {
		var i Waypoint
		if err := rows.Scan(
			&i.Symbol,
			&i.System,
			&i.Orbits,
			&i.X,
			&i.Y,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertWaypoint = `-- name: InsertWaypoint :exec
INSERT INTO waypoints (
	symbol, system, x, y, orbits, type
) VALUES (
	?, ?, ?, ?, ?, ?
)
`

type InsertWaypointParams struct {
	Symbol string
	System string
	X      int64
	Y      int64
	Orbits interface{}
	Type   string
}

func (q *Queries) InsertWaypoint(ctx context.Context, arg InsertWaypointParams) error {
	_, err := q.exec(ctx, q.insertWaypointStmt, insertWaypoint,
		arg.Symbol,
		arg.System,
		arg.X,
		arg.Y,
		arg.Orbits,
		arg.Type,
	)
	return err
}

const truncateWaypoints = `-- name: TruncateWaypoints :exec
DELETE FROM waypoints
`

func (q *Queries) TruncateWaypoints(ctx context.Context) error {
	_, err := q.exec(ctx, q.truncateWaypointsStmt, truncateWaypoints)
	return err
}
