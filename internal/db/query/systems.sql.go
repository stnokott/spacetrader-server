// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: systems.sql

package query

import (
	"context"
)

const getAllSystems = `-- name: GetAllSystems :many
SELECT
	  systems.symbol AS name
	, systems.x AS x
	, systems.y AS y
	, COUNT(jump_gates.waypoint) > 0 AS has_jumpgates
FROM systems
JOIN waypoints
	ON systems.symbol = waypoints.system
LEFT JOIN jump_gates
	ON waypoints.symbol = jump_gates.waypoint
GROUP BY
	  systems.symbol
	, systems.x
	, systems.y
`

type GetAllSystemsRow struct {
	Name         string
	X            int64
	Y            int64
	HasJumpgates bool
}

func (q *Queries) GetAllSystems(ctx context.Context) ([]GetAllSystemsRow, error) {
	rows, err := q.query(ctx, q.getAllSystemsStmt, getAllSystems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllSystemsRow{}
	for rows.Next() {
		var i GetAllSystemsRow
		if err := rows.Scan(
			&i.Name,
			&i.X,
			&i.Y,
			&i.HasJumpgates,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSystemByName = `-- name: GetSystemByName :one
;

SELECT x, y FROM systems
WHERE symbol = ?1
`

type GetSystemByNameRow struct {
	X int64
	Y int64
}

func (q *Queries) GetSystemByName(ctx context.Context, systemName string) (GetSystemByNameRow, error) {
	row := q.queryRow(ctx, q.getSystemByNameStmt, getSystemByName, systemName)
	var i GetSystemByNameRow
	err := row.Scan(&i.X, &i.Y)
	return i, err
}

const hasSystemsRows = `-- name: HasSystemsRows :one
SELECT EXISTS (SELECT 1 FROM systems) AS "exists"
`

func (q *Queries) HasSystemsRows(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.hasSystemsRowsStmt, hasSystemsRows)
	var exists int64
	err := row.Scan(&exists)
	return exists, err
}

const insertSystem = `-- name: InsertSystem :exec
INSERT INTO systems (
	symbol, x, y, type, factions	
) VALUES (
	?, ?, ?, ?, ?
)
`

type InsertSystemParams struct {
	Symbol   string
	X        int64
	Y        int64
	Type     string
	Factions string
}

func (q *Queries) InsertSystem(ctx context.Context, arg InsertSystemParams) error {
	_, err := q.exec(ctx, q.insertSystemStmt, insertSystem,
		arg.Symbol,
		arg.X,
		arg.Y,
		arg.Type,
		arg.Factions,
	)
	return err
}

const truncateSystems = `-- name: TruncateSystems :exec
DELETE FROM systems
`

func (q *Queries) TruncateSystems(ctx context.Context) error {
	_, err := q.exec(ctx, q.truncateSystemsStmt, truncateSystems)
	return err
}
