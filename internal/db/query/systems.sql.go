// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: systems.sql

package query

import (
	"context"
)

const getSystemByName = `-- name: GetSystemByName :one
SELECT x, y FROM systems
WHERE symbol = ?1
`

type GetSystemByNameRow struct {
	X int64
	Y int64
}

func (q *Queries) GetSystemByName(ctx context.Context, systemName string) (GetSystemByNameRow, error) {
	row := q.queryRow(ctx, q.getSystemByNameStmt, getSystemByName, systemName)
	var i GetSystemByNameRow
	err := row.Scan(&i.X, &i.Y)
	return i, err
}

const insertSystem = `-- name: InsertSystem :exec
INSERT INTO systems (
	symbol, x, y, type, factions	
) VALUES (
	?, ?, ?, ?, ?
)
`

type InsertSystemParams struct {
	Symbol   string
	X        int64
	Y        int64
	Type     string
	Factions string
}

func (q *Queries) InsertSystem(ctx context.Context, arg InsertSystemParams) error {
	_, err := q.exec(ctx, q.insertSystemStmt, insertSystem,
		arg.Symbol,
		arg.X,
		arg.Y,
		arg.Type,
		arg.Factions,
	)
	return err
}

const selectSystemsInRect = `-- name: SelectSystemsInRect :many
SELECT symbol, x, y, type, factions FROM systems
	WHERE TRUE
		AND x >= ?1 AND x <= ?2
		AND y >= ?3 AND y <= ?4
`

type SelectSystemsInRectParams struct {
	XMin int64
	XMax int64
	YMin int64
	YMax int64
}

func (q *Queries) SelectSystemsInRect(ctx context.Context, arg SelectSystemsInRectParams) ([]System, error) {
	rows, err := q.query(ctx, q.selectSystemsInRectStmt, selectSystemsInRect,
		arg.XMin,
		arg.XMax,
		arg.YMin,
		arg.YMax,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []System{}
	for rows.Next() {
		var i System
		if err := rows.Scan(
			&i.Symbol,
			&i.X,
			&i.Y,
			&i.Type,
			&i.Factions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const truncateSystems = `-- name: TruncateSystems :exec
DELETE FROM systems
`

func (q *Queries) TruncateSystems(ctx context.Context) error {
	_, err := q.exec(ctx, q.truncateSystemsStmt, truncateSystems)
	return err
}
