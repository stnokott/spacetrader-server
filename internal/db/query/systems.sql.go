// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: systems.sql

package query

import (
	"context"
	"strings"
)

const getSystemCount = `-- name: GetSystemCount :one
SELECT
	COUNT(*) AS n
FROM systems
`

func (q *Queries) GetSystemCount(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.getSystemCountStmt, getSystemCount)
	var n int64
	err := row.Scan(&n)
	return n, err
}

const getSystemsByName = `-- name: GetSystemsByName :many
;

SELECT symbol, x, y, type, factions FROM systems
WHERE symbol IN (/*SLICE:system_ids*/?)
`

func (q *Queries) GetSystemsByName(ctx context.Context, systemIds []string) ([]System, error) {
	query := getSystemsByName
	var queryParams []interface{}
	if len(systemIds) > 0 {
		for _, v := range systemIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:system_ids*/?", strings.Repeat(",?", len(systemIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:system_ids*/?", "NULL", 1)
	}
	rows, err := q.query(ctx, nil, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []System{}
	for rows.Next() {
		var i System
		if err := rows.Scan(
			&i.Symbol,
			&i.X,
			&i.Y,
			&i.Type,
			&i.Factions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSystemsOffset = `-- name: GetSystemsOffset :many
;

SELECT
	symbol, x, y, type, factions
FROM systems
ORDER BY symbol
LIMIT ?2 OFFSET ?1
`

type GetSystemsOffsetParams struct {
	Offset int64
	Limit  int64
}

func (q *Queries) GetSystemsOffset(ctx context.Context, arg GetSystemsOffsetParams) ([]System, error) {
	rows, err := q.query(ctx, q.getSystemsOffsetStmt, getSystemsOffset, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []System{}
	for rows.Next() {
		var i System
		if err := rows.Scan(
			&i.Symbol,
			&i.X,
			&i.Y,
			&i.Type,
			&i.Factions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hasSystemsRows = `-- name: HasSystemsRows :one
SELECT EXISTS (SELECT 1 FROM systems) AS "exists"
`

func (q *Queries) HasSystemsRows(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.hasSystemsRowsStmt, hasSystemsRows)
	var exists int64
	err := row.Scan(&exists)
	return exists, err
}

const insertSystem = `-- name: InsertSystem :exec
INSERT INTO systems (
	symbol, x, y, type, factions	
) VALUES (
	?, ?, ?, ?, ?
)
`

type InsertSystemParams struct {
	Symbol   string
	X        int64
	Y        int64
	Type     string
	Factions string
}

func (q *Queries) InsertSystem(ctx context.Context, arg InsertSystemParams) error {
	_, err := q.exec(ctx, q.insertSystemStmt, insertSystem,
		arg.Symbol,
		arg.X,
		arg.Y,
		arg.Type,
		arg.Factions,
	)
	return err
}

const systemHasJumpgates = `-- name: SystemHasJumpgates :one
SELECT
	COUNT(jump_gates.waypoint) > 0 AS has_jumpgates
FROM systems
LEFT JOIN waypoints
	ON waypoints.system = systems.symbol
LEFT JOIN jump_gates
	ON jump_gates.waypoint = waypoints.symbol
WHERE systems.symbol = ?1
GROUP BY systems.symbol
`

func (q *Queries) SystemHasJumpgates(ctx context.Context, systemID string) (bool, error) {
	row := q.queryRow(ctx, q.systemHasJumpgatesStmt, systemHasJumpgates, systemID)
	var has_jumpgates bool
	err := row.Scan(&has_jumpgates)
	return has_jumpgates, err
}

const truncateSystems = `-- name: TruncateSystems :exec
DELETE FROM systems
`

func (q *Queries) TruncateSystems(ctx context.Context) error {
	_, err := q.exec(ctx, q.truncateSystemsStmt, truncateSystems)
	return err
}
