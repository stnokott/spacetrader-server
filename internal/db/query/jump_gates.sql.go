// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: jump_gates.sql

package query

import (
	"context"
)

const getConnectionsForWaypoint = `-- name: GetConnectionsForWaypoint :many
SELECT
	connects_to AS connected_wp
FROM jump_gates
WHERE waypoint = ?1
`

func (q *Queries) GetConnectionsForWaypoint(ctx context.Context, waypoint string) ([]string, error) {
	rows, err := q.query(ctx, q.getConnectionsForWaypointStmt, getConnectionsForWaypoint, waypoint)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var connected_wp string
		if err := rows.Scan(&connected_wp); err != nil {
			return nil, err
		}
		items = append(items, connected_wp)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertJumpGate = `-- name: InsertJumpGate :exec
INSERT INTO jump_gates (
	waypoint, connects_to
) VALUES (
	?, ?
)
`

type InsertJumpGateParams struct {
	Waypoint   string
	ConnectsTo string
}

func (q *Queries) InsertJumpGate(ctx context.Context, arg InsertJumpGateParams) error {
	_, err := q.exec(ctx, q.insertJumpGateStmt, insertJumpGate, arg.Waypoint, arg.ConnectsTo)
	return err
}

const truncateJumpGates = `-- name: TruncateJumpGates :exec
DELETE FROM jump_gates
`

func (q *Queries) TruncateJumpGates(ctx context.Context) error {
	_, err := q.exec(ctx, q.truncateJumpGatesStmt, truncateJumpGates)
	return err
}
