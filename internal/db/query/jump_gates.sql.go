// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: jump_gates.sql

package query

import (
	"context"
)

const getConnectedSystemNames = `-- name: GetConnectedSystemNames :many
SELECT
	connects_to_sys
FROM jump_gates
WHERE system = ?1
`

func (q *Queries) GetConnectedSystemNames(ctx context.Context, systemName string) ([]string, error) {
	rows, err := q.query(ctx, q.getConnectedSystemNamesStmt, getConnectedSystemNames, systemName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var connects_to_sys string
		if err := rows.Scan(&connects_to_sys); err != nil {
			return nil, err
		}
		items = append(items, connects_to_sys)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertJumpGate = `-- name: InsertJumpGate :exec
INSERT INTO jump_gates (
	system, waypoint, connects_to_wp, connects_to_sys
) VALUES (
	?, ?, ?, ?
)
`

type InsertJumpGateParams struct {
	System        string
	Waypoint      string
	ConnectsToWp  string
	ConnectsToSys string
}

func (q *Queries) InsertJumpGate(ctx context.Context, arg InsertJumpGateParams) error {
	_, err := q.exec(ctx, q.insertJumpGateStmt, insertJumpGate,
		arg.System,
		arg.Waypoint,
		arg.ConnectsToWp,
		arg.ConnectsToSys,
	)
	return err
}

const truncateJumpGates = `-- name: TruncateJumpGates :exec
DELETE FROM jump_gates
`

func (q *Queries) TruncateJumpGates(ctx context.Context) error {
	_, err := q.exec(ctx, q.truncateJumpGatesStmt, truncateJumpGates)
	return err
}
