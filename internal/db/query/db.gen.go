// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package query

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.getConnectedSystemNamesStmt, err = db.PrepareContext(ctx, getConnectedSystemNames); err != nil {
		return nil, fmt.Errorf("error preparing query GetConnectedSystemNames: %w", err)
	}
	if q.getSystemCountStmt, err = db.PrepareContext(ctx, getSystemCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetSystemCount: %w", err)
	}
	if q.getSystemsByNameStmt, err = db.PrepareContext(ctx, getSystemsByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetSystemsByName: %w", err)
	}
	if q.getSystemsOffsetStmt, err = db.PrepareContext(ctx, getSystemsOffset); err != nil {
		return nil, fmt.Errorf("error preparing query GetSystemsOffset: %w", err)
	}
	if q.hasSystemsRowsStmt, err = db.PrepareContext(ctx, hasSystemsRows); err != nil {
		return nil, fmt.Errorf("error preparing query HasSystemsRows: %w", err)
	}
	if q.insertJumpGateStmt, err = db.PrepareContext(ctx, insertJumpGate); err != nil {
		return nil, fmt.Errorf("error preparing query InsertJumpGate: %w", err)
	}
	if q.insertSystemStmt, err = db.PrepareContext(ctx, insertSystem); err != nil {
		return nil, fmt.Errorf("error preparing query InsertSystem: %w", err)
	}
	if q.insertWaypointStmt, err = db.PrepareContext(ctx, insertWaypoint); err != nil {
		return nil, fmt.Errorf("error preparing query InsertWaypoint: %w", err)
	}
	if q.truncateJumpGatesStmt, err = db.PrepareContext(ctx, truncateJumpGates); err != nil {
		return nil, fmt.Errorf("error preparing query TruncateJumpGates: %w", err)
	}
	if q.truncateSystemsStmt, err = db.PrepareContext(ctx, truncateSystems); err != nil {
		return nil, fmt.Errorf("error preparing query TruncateSystems: %w", err)
	}
	if q.truncateWaypointsStmt, err = db.PrepareContext(ctx, truncateWaypoints); err != nil {
		return nil, fmt.Errorf("error preparing query TruncateWaypoints: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.getConnectedSystemNamesStmt != nil {
		if cerr := q.getConnectedSystemNamesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getConnectedSystemNamesStmt: %w", cerr)
		}
	}
	if q.getSystemCountStmt != nil {
		if cerr := q.getSystemCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSystemCountStmt: %w", cerr)
		}
	}
	if q.getSystemsByNameStmt != nil {
		if cerr := q.getSystemsByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSystemsByNameStmt: %w", cerr)
		}
	}
	if q.getSystemsOffsetStmt != nil {
		if cerr := q.getSystemsOffsetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSystemsOffsetStmt: %w", cerr)
		}
	}
	if q.hasSystemsRowsStmt != nil {
		if cerr := q.hasSystemsRowsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing hasSystemsRowsStmt: %w", cerr)
		}
	}
	if q.insertJumpGateStmt != nil {
		if cerr := q.insertJumpGateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertJumpGateStmt: %w", cerr)
		}
	}
	if q.insertSystemStmt != nil {
		if cerr := q.insertSystemStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertSystemStmt: %w", cerr)
		}
	}
	if q.insertWaypointStmt != nil {
		if cerr := q.insertWaypointStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertWaypointStmt: %w", cerr)
		}
	}
	if q.truncateJumpGatesStmt != nil {
		if cerr := q.truncateJumpGatesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing truncateJumpGatesStmt: %w", cerr)
		}
	}
	if q.truncateSystemsStmt != nil {
		if cerr := q.truncateSystemsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing truncateSystemsStmt: %w", cerr)
		}
	}
	if q.truncateWaypointsStmt != nil {
		if cerr := q.truncateWaypointsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing truncateWaypointsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	getConnectedSystemNamesStmt *sql.Stmt
	getSystemCountStmt          *sql.Stmt
	getSystemsByNameStmt        *sql.Stmt
	getSystemsOffsetStmt        *sql.Stmt
	hasSystemsRowsStmt          *sql.Stmt
	insertJumpGateStmt          *sql.Stmt
	insertSystemStmt            *sql.Stmt
	insertWaypointStmt          *sql.Stmt
	truncateJumpGatesStmt       *sql.Stmt
	truncateSystemsStmt         *sql.Stmt
	truncateWaypointsStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		getConnectedSystemNamesStmt: q.getConnectedSystemNamesStmt,
		getSystemCountStmt:          q.getSystemCountStmt,
		getSystemsByNameStmt:        q.getSystemsByNameStmt,
		getSystemsOffsetStmt:        q.getSystemsOffsetStmt,
		hasSystemsRowsStmt:          q.hasSystemsRowsStmt,
		insertJumpGateStmt:          q.insertJumpGateStmt,
		insertSystemStmt:            q.insertSystemStmt,
		insertWaypointStmt:          q.insertWaypointStmt,
		truncateJumpGatesStmt:       q.truncateJumpGatesStmt,
		truncateSystemsStmt:         q.truncateSystemsStmt,
		truncateWaypointsStmt:       q.truncateWaypointsStmt,
	}
}
