package convert

import (
	"fmt"
	"strings"

	"github.com/stnokott/spacetrader-server/internal/db/query"
	pb "github.com/stnokott/spacetrader-server/internal/proto"
)

// ConverterDB converts between DB structs (generated by sqlc) and protobuf structs.
// goverter:converter
// goverter:output:file ./convert_db.gen.go
// goverter:output:package github.com/stnokott/spacetrader-server/internal/convert
// goverter:output:format function
// goverter:ignoreUnexported yes
// goverter:extend Int.*
// goverter:extend Parse.*
type ConverterDB interface {
	// goverter:map Symbol Id
	// goverter:ignore Sector
	// goverter:ignore Waypoints
	// goverter:map Type Type | ParseSystemType
	// goverter:map Factions Factions | ParseDBFactions
	ConvertSystem(*query.System) (*pb.System, error)
}

// ParseSystemType parses a system type string into its enum equivalent.
func ParseSystemType(src string) (pb.System_Type, error) {
	if t, ok := pb.System_Type_value[src]; ok {
		return pb.System_Type(t), nil
	}
	return pb.System_UNKNOWN_SYSTEMTYPE, fmt.Errorf("invalid system type '%s'", src)
}

// ParseDBFactions splits a string representation of 0..n factions into a list of enums.
func ParseDBFactions(src string) ([]pb.Faction, error) {
	if src == "" {
		return []pb.Faction{}, nil
	}
	split := strings.Split(src, ",")
	factions := make([]pb.Faction, len(split))
	for i, s := range split {
		faction, err := ParseFaction(s)
		if err != nil {
			return nil, err
		}
		factions[i] = faction
	}
	return factions, nil
}
