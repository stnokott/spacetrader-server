// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package convert

import (
	"fmt"
	api "github.com/stnokott/spacetrader-server/internal/api"
	proto "github.com/stnokott/spacetrader-server/internal/proto"
)

func ConvertAgent(source *api.Agent) (*proto.Agent, error) {
	var pProtoAgent *proto.Agent
	if source != nil {
		var protoAgent proto.Agent
		protoAgent.Name = (*source).Symbol
		protoAgent.Credits = (*source).Credits
		protoAgent.Headquarters = (*source).Headquarters
		protoAgent.ShipCount = IntToInt32((*source).ShipCount)
		protoFaction, err := ParseFaction((*source).StartingFaction)
		if err != nil {
			return nil, err
		}
		protoAgent.StartingFaction = protoFaction
		pProtoAgent = &protoAgent
	}
	return pProtoAgent, nil
}
func ConvertNavRoute(source api.ShipNavRoute) (*proto.Ship_Route, error) {
	var protoShip_Route proto.Ship_Route
	pProtoWaypointBase, err := ConvertNavWaypoint(source.Origin)
	if err != nil {
		return nil, err
	}
	protoShip_Route.Origin = pProtoWaypointBase
	pProtoWaypointBase2, err := ConvertNavWaypoint(source.Destination)
	if err != nil {
		return nil, err
	}
	protoShip_Route.Destination = pProtoWaypointBase2
	protoShip_Route.DepartureTime = ParseTimestamp(source.DepartureTime)
	protoShip_Route.ArrivalTime = ParseTimestamp(source.Arrival)
	return &protoShip_Route, nil
}
func ConvertNavWaypoint(source api.ShipNavRouteWaypoint) (*proto.WaypointBase, error) {
	var protoWaypointBase proto.WaypointBase
	protoWaypointBase.Id = source.Symbol
	protoWaypointBase.System = source.SystemSymbol
	protoWaypointBase_Type, err := ParseWaypointType(source.Type)
	if err != nil {
		return nil, err
	}
	protoWaypointBase.Type = protoWaypointBase_Type
	protoWaypointBase.X = IntToInt32(source.X)
	protoWaypointBase.Y = IntToInt32(source.Y)
	return &protoWaypointBase, nil
}
func ConvertShip(source *api.Ship) (*proto.Ship, error) {
	var pProtoShip *proto.Ship
	if source != nil {
		var protoShip proto.Ship
		protoShip.Id = (*source).Symbol
		protoShip.Name = (*source).Registration.Name
		protoShip_Role, err := ConvertShipRole((*source).Registration.Role)
		if err != nil {
			return nil, err
		}
		protoShip.Role = protoShip_Role
		protoShip.CurrentLocation = ConvertShipLocation((*source).Nav)
		pProtoShip_Route, err := ConvertNavRoute((*source).Nav.Route)
		if err != nil {
			return nil, err
		}
		protoShip.Route = pProtoShip_Route
		protoShip_FlightStatus, err := ConvertShipFlightStatus((*source).Nav.Status)
		if err != nil {
			return nil, err
		}
		protoShip.Status = protoShip_FlightStatus
		pProtoShip = &protoShip
	}
	return pProtoShip, nil
}
func ConvertShipFlightStatus(source api.ShipNavStatus) (proto.Ship_FlightStatus, error) {
	var protoShip_FlightStatus proto.Ship_FlightStatus
	switch source {
	case api.DOCKED:
		protoShip_FlightStatus = proto.Ship_DOCKED
	case api.INORBIT:
		protoShip_FlightStatus = proto.Ship_IN_ORBIT
	case api.INTRANSIT:
		protoShip_FlightStatus = proto.Ship_IN_TRANSIT
	default:
		return protoShip_FlightStatus, fmt.Errorf("unexpected enum element: %v", source)
	}
	return protoShip_FlightStatus, nil
}
func ConvertShipLocation(source api.ShipNav) *proto.Ship_Location {
	var protoShip_Location proto.Ship_Location
	protoShip_Location.System = source.SystemSymbol
	protoShip_Location.Waypoint = source.WaypointSymbol
	return &protoShip_Location
}
func ConvertShipRole(source api.ShipRole) (proto.Ship_Role, error) {
	var protoShip_Role proto.Ship_Role
	switch source {
	case api.ShipRoleCARRIER:
		protoShip_Role = proto.Ship_CARRIER
	case api.ShipRoleCOMMAND:
		protoShip_Role = proto.Ship_COMMAND
	case api.ShipRoleEXCAVATOR:
		protoShip_Role = proto.Ship_EXCAVATOR
	case api.ShipRoleEXPLORER:
		protoShip_Role = proto.Ship_EXPLORER
	case api.ShipRoleFABRICATOR:
		protoShip_Role = proto.Ship_FABRICATOR
	case api.ShipRoleHARVESTER:
		protoShip_Role = proto.Ship_HARVESTER
	case api.ShipRoleHAULER:
		protoShip_Role = proto.Ship_HAULER
	case api.ShipRoleINTERCEPTOR:
		protoShip_Role = proto.Ship_INTERCEPTOR
	case api.ShipRolePATROL:
		protoShip_Role = proto.Ship_PATROL
	case api.ShipRoleREFINERY:
		protoShip_Role = proto.Ship_REFINERY
	case api.ShipRoleREPAIR:
		protoShip_Role = proto.Ship_REPAIR
	case api.ShipRoleSATELLITE:
		protoShip_Role = proto.Ship_SATELLITE
	case api.ShipRoleSURVEYOR:
		protoShip_Role = proto.Ship_SURVEYOR
	case api.ShipRoleTRANSPORT:
		protoShip_Role = proto.Ship_TRANSPORT
	default:
		return protoShip_Role, fmt.Errorf("unexpected enum element: %v", source)
	}
	return protoShip_Role, nil
}
func ConvertShips(source []*api.Ship) ([]*proto.Ship, error) {
	var pProtoShipList []*proto.Ship
	if source != nil {
		pProtoShipList = make([]*proto.Ship, len(source))
		for i := 0; i < len(source); i++ {
			pProtoShip, err := ConvertShip(source[i])
			if err != nil {
				return nil, err
			}
			pProtoShipList[i] = pProtoShip
		}
	}
	return pProtoShipList, nil
}
func ConvertStatus(source *api.Status) *proto.ServerStatus {
	var pProtoServerStatus *proto.ServerStatus
	if source != nil {
		var protoServerStatus proto.ServerStatus
		protoServerStatus.Version = (*source).Version
		protoServerStatus.LastReset = ParseTimestamp((*source).LastReset.Time)
		protoServerStatus.NextReset = ParseTimestamp((*source).Resets.Next)
		protoServerStatus_GlobalStats := unnamedToProtoServerStatus_GlobalStats((*source).Statistics)
		protoServerStatus.GlobalStats = &protoServerStatus_GlobalStats
		if (*source).Announcements != nil {
			protoServerStatus.Announcements = make([]*proto.ServerStatus_Announcement, len((*source).Announcements))
			for i := 0; i < len((*source).Announcements); i++ {
				protoServerStatus_Announcement := unnamedToProtoServerStatus_Announcement((*source).Announcements[i])
				protoServerStatus.Announcements[i] = &protoServerStatus_Announcement
			}
		}
		pProtoServerStatus = &protoServerStatus
	}
	return pProtoServerStatus
}
func unnamedToProtoServerStatus_Announcement(source struct {
	Title string `json:"title"`
	Body  string `json:"body"`
}) proto.ServerStatus_Announcement {
	var protoServerStatus_Announcement proto.ServerStatus_Announcement
	protoServerStatus_Announcement.Title = source.Title
	protoServerStatus_Announcement.Body = source.Body
	return protoServerStatus_Announcement
}
func unnamedToProtoServerStatus_GlobalStats(source struct {
	Agents    int64 `json:"agents"`
	Ships     int64 `json:"ships"`
	Waypoints int64 `json:"waypoints"`
	Systems   int64 `json:"systems"`
}) proto.ServerStatus_GlobalStats {
	var protoServerStatus_GlobalStats proto.ServerStatus_GlobalStats
	protoServerStatus_GlobalStats.Agents = source.Agents
	protoServerStatus_GlobalStats.Ships = source.Ships
	protoServerStatus_GlobalStats.Waypoints = source.Waypoints
	protoServerStatus_GlobalStats.Systems = source.Systems
	return protoServerStatus_GlobalStats
}
