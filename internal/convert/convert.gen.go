// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package convert

import (
	"fmt"
	api "github.com/stnokott/spacetrader-server/internal/api"
	query "github.com/stnokott/spacetrader-server/internal/db/query"
	model "github.com/stnokott/spacetrader-server/internal/graph/model"
)

func ConvertAgent(source *api.Agent) *model.Agent {
	var pModelAgent *model.Agent
	if source != nil {
		var modelAgent model.Agent
		modelAgent.Name = (*source).Symbol
		modelAgent.Credits = (*source).Credits
		modelAgent.Hq = (*source).Headquarters
		pModelAgent = &modelAgent
	}
	return pModelAgent
}
func ConvertServerStatus(source *api.Status) *model.Server {
	var pModelServer *model.Server
	if source != nil {
		var modelServer model.Server
		modelServer.Version = (*source).Version
		modelServer.LastReset = TimeToTime((*source).LastReset.Time)
		modelServer.NextReset = TimeToTime((*source).Resets.Next)
		modelServerStats := unnamedToModelServerStats((*source).Statistics)
		modelServer.Stats = &modelServerStats
		if (*source).Announcements != nil {
			modelServer.Announcements = make([]*model.ServerAnnouncement, len((*source).Announcements))
			for i := 0; i < len((*source).Announcements); i++ {
				modelServerAnnouncement := unnamedToModelServerAnnouncement((*source).Announcements[i])
				modelServer.Announcements[i] = &modelServerAnnouncement
			}
		}
		pModelServer = &modelServer
	}
	return pModelServer
}
func ConvertShip(source *api.Ship) (*model.Ship, error) {
	var pModelShip *model.Ship
	if source != nil {
		var modelShip model.Ship
		modelShip.Name = (*source).Registration.Name
		apiShipRole, err := apiShipRoleToApiShipRole((*source).Registration.Role)
		if err != nil {
			return nil, err
		}
		modelShip.Role = apiShipRole
		apiShipNavStatus, err := apiShipNavStatusToApiShipNavStatus((*source).Nav.Status)
		if err != nil {
			return nil, err
		}
		modelShip.Status = apiShipNavStatus
		modelShip.SystemID = (*source).Nav.SystemSymbol
		pModelShip = &modelShip
	}
	return pModelShip, nil
}
func ConvertShips(source []*api.Ship) ([]*model.Ship, error) {
	var pModelShipList []*model.Ship
	if source != nil {
		pModelShipList = make([]*model.Ship, len(source))
		for i := 0; i < len(source); i++ {
			pModelShip, err := ConvertShip(source[i])
			if err != nil {
				return nil, err
			}
			pModelShipList[i] = pModelShip
		}
	}
	return pModelShipList, nil
}
func ConvertSystem(source query.System) *model.System {
	var modelSystem model.System
	modelSystem.Name = source.Symbol
	modelSystem.Type = api.SystemType(source.Type)
	modelSystem.X = Int64ToInt(source.X)
	modelSystem.Y = Int64ToInt(source.Y)
	return &modelSystem
}
func ConvertSystems(source []query.System) []*model.System {
	var pModelSystemList []*model.System
	if source != nil {
		pModelSystemList = make([]*model.System, len(source))
		for i := 0; i < len(source); i++ {
			pModelSystemList[i] = ConvertSystem(source[i])
		}
	}
	return pModelSystemList
}
func apiShipNavStatusToApiShipNavStatus(source api.ShipNavStatus) (api.ShipNavStatus, error) {
	var apiShipNavStatus api.ShipNavStatus
	switch source {
	case api.DOCKED:
		apiShipNavStatus = api.DOCKED
	case api.INORBIT:
		apiShipNavStatus = api.INORBIT
	case api.INTRANSIT:
		apiShipNavStatus = api.INTRANSIT
	default:
		return apiShipNavStatus, fmt.Errorf("unexpected enum element: %v", source)
	}
	return apiShipNavStatus, nil
}
func apiShipRoleToApiShipRole(source api.ShipRole) (api.ShipRole, error) {
	var apiShipRole api.ShipRole
	switch source {
	case api.ShipRoleCARRIER:
		apiShipRole = api.ShipRoleCARRIER
	case api.ShipRoleCOMMAND:
		apiShipRole = api.ShipRoleCOMMAND
	case api.ShipRoleEXCAVATOR:
		apiShipRole = api.ShipRoleEXCAVATOR
	case api.ShipRoleEXPLORER:
		apiShipRole = api.ShipRoleEXPLORER
	case api.ShipRoleFABRICATOR:
		apiShipRole = api.ShipRoleFABRICATOR
	case api.ShipRoleHARVESTER:
		apiShipRole = api.ShipRoleHARVESTER
	case api.ShipRoleHAULER:
		apiShipRole = api.ShipRoleHAULER
	case api.ShipRoleINTERCEPTOR:
		apiShipRole = api.ShipRoleINTERCEPTOR
	case api.ShipRolePATROL:
		apiShipRole = api.ShipRolePATROL
	case api.ShipRoleREFINERY:
		apiShipRole = api.ShipRoleREFINERY
	case api.ShipRoleREPAIR:
		apiShipRole = api.ShipRoleREPAIR
	case api.ShipRoleSATELLITE:
		apiShipRole = api.ShipRoleSATELLITE
	case api.ShipRoleSURVEYOR:
		apiShipRole = api.ShipRoleSURVEYOR
	case api.ShipRoleTRANSPORT:
		apiShipRole = api.ShipRoleTRANSPORT
	default:
		return apiShipRole, fmt.Errorf("unexpected enum element: %v", source)
	}
	return apiShipRole, nil
}
func unnamedToModelServerAnnouncement(source struct {
	Title string `json:"title"`
	Body  string `json:"body"`
}) model.ServerAnnouncement {
	var modelServerAnnouncement model.ServerAnnouncement
	modelServerAnnouncement.Title = source.Title
	modelServerAnnouncement.Body = source.Body
	return modelServerAnnouncement
}
func unnamedToModelServerStats(source struct {
	Agents    int64 `json:"agents"`
	Ships     int64 `json:"ships"`
	Waypoints int64 `json:"waypoints"`
	Systems   int64 `json:"systems"`
}) model.ServerStats {
	var modelServerStats model.ServerStats
	modelServerStats.Agents = Int64ToInt(source.Agents)
	modelServerStats.Ships = Int64ToInt(source.Ships)
	modelServerStats.Systems = Int64ToInt(source.Systems)
	modelServerStats.Waypoints = Int64ToInt(source.Waypoints)
	return modelServerStats
}
