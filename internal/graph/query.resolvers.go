package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.53

import (
	"context"
	"errors"
	"fmt"

	"github.com/stnokott/spacetrader-server/internal/api"
	"github.com/stnokott/spacetrader-server/internal/convert"
	"github.com/stnokott/spacetrader-server/internal/graph/model"
)

// Server is the resolver for the server field.
func (r *queryResolver) Server(ctx context.Context) (*model.Server, error) {
	result := new(api.Status)
	if err := r.api.Get(ctx, result, "/"); err != nil {
		return nil, err
	}
	converted := convert.ConvertServerStatus(result)
	return converted, nil
}

// Agent is the resolver for the agent field.
func (r *queryResolver) Agent(ctx context.Context) (*model.Agent, error) {
	result := new(struct {
		// for some reason, SpaceTraders decided it's a good idea to wrap the agent
		// info in a useless "data" field.
		Data *api.Agent `json:"data"`
	})
	if err := r.api.Get(ctx, result, "/my/agent"); err != nil {
		return nil, err
	}

	return convert.ConvertAgent(result.Data), nil
}

// Ships is the resolver for the ships field.
func (r *queryResolver) Ships(ctx context.Context) ([]*model.Ship, error) {
	if r.fleetCache.Ships == nil {
		return nil, errors.New("fleet cache has not been initialized")
	}
	return r.fleetCache.Ships, nil
}

// SystemCount is the resolver for the systemCount field.
func (r *queryResolver) SystemCount(ctx context.Context) (int64, error) {
	total, err := r.db.GetSystemCount(ctx)
	if err != nil {
		return -1, fmt.Errorf("getting total system count: %w", err)
	}
	return total, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
