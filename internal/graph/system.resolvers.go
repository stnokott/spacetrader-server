package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.53

import (
	"context"
	"fmt"

	"github.com/stnokott/spacetrader-server/internal/convert"
	"github.com/stnokott/spacetrader-server/internal/graph/model"
)

// Waypoints is the resolver for the waypoints field.
func (r *systemResolver) Waypoints(ctx context.Context, obj *model.System) ([]*model.Waypoint, error) {
	waypoints, err := r.db.GetWaypointsForSystem(ctx, obj.Name)
	if err != nil {
		return nil, fmt.Errorf("querying waypoints for system %s: %w", obj.Name, err)
	}
	return convert.ConvertWaypoints(waypoints), nil
}

// HasJumpgates is the resolver for the hasJumpgates field.
func (r *systemResolver) HasJumpgates(ctx context.Context, obj *model.System) (bool, error) {
	b, err := r.db.SystemHasJumpgates(ctx, obj.Name)
	if err != nil {
		return false, fmt.Errorf("querying jumpgate boolean for system %s: %w", obj.Name, err)
	}
	return b, nil
}

// System returns SystemResolver implementation.
func (r *Resolver) System() SystemResolver { return &systemResolver{r} }

type systemResolver struct{ *Resolver }
