package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.53

import (
	"context"
	"fmt"

	"github.com/stnokott/spacetrader-server/internal/convert"
	"github.com/stnokott/spacetrader-server/internal/db/query"
	"github.com/stnokott/spacetrader-server/internal/graph/model"
)

// System is the resolver for the system field.
func (r *subscriptionResolver) System(ctx context.Context) (<-chan *model.System, error) {
	logger.Debug("new systems subscription")
	ch := make(chan *model.System)

	total, err := r.db.GetSystemCount(ctx)
	if err != nil {
		return nil, fmt.Errorf("getting total system count: %w", err)
	}

	go func() {
		const batchSize = 50

		for offset := int64(0); offset < total; offset += batchSize {
			rows, err := r.db.GetSystemsOffset(ctx, query.GetSystemsOffsetParams{
				Offset: offset,
				Limit:  batchSize,
			})
			if err != nil {
				logger.Warnf("error getting system at offset %d: %v", offset, err)
				continue
			}

			for _, row := range rows {
				select {
				case <-ctx.Done():
					// context deadline exceeded
					logger.Debug("systems subscription cancelled")
					return
				case ch <- convert.ConvertSystem(row):
					// successful send
				}
			}
		}
		logger.Debug("initial system subscription data sent")
	}()

	return ch, nil
}

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
